// need to find more optimal sol
class Solution {
  public boolean exist(char[][] board, String word) {
    int rows = board.length;
    int cols = board[0].length;

    for (int i = 0; i < rows; i++) {
      for (int j = 0; j < cols; j++) {
        if (board[i][j] == word.charAt(0) && searchWord(board, i, j, 0, word)) {
          return true;
        }
      }
    }
    return false;
  }

  private boolean searchWord(char[][] board, int i, int j, int k, String word) {
    if (k == word.length()) {
      return true;
    }

    if (i < 0 || i >= board.length || j < 0 || j >= board[0].length || board[i][j] != word.charAt(k)) {
      return false;
    }

    
    char temp = board[i][j];
    board[i][j] = '#';

    boolean found = searchWord(board, i + 1, j, k + 1, word) || 
                   searchWord(board, i - 1, j, k + 1, word) || 
                   searchWord(board, i, j + 1, k + 1, word) || 
                   searchWord(board, i, j - 1, k + 1, word); 

    board[i][j] = temp;

    return found;
  }
}
