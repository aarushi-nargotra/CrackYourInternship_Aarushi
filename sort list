/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode sortList(ListNode head) {
        if(head == null || head.next == null)
            return head;
    
        return mergeSort(head);
    }
    
    public ListNode mergeSort(ListNode head){
        if(head.next == null)
            return head;
        
        ListNode midPrev = getMidPrev(head);
        
        ListNode mid = midPrev.next;
        midPrev.next = null;
        
        ListNode left = mergeSort(head);
        ListNode right = mergeSort(mid);
    
        return merge(left,right);
    }
    
    public ListNode merge(ListNode left, ListNode right){
        if(left == right)
            return left;
        ListNode dummyHead = new ListNode();
        ListNode tail = dummyHead;
        
        while(left!= null && right!=null){
            if(left.val < right.val){
                tail.next= left;
                left = left.next;
            } else {
                tail.next = right;
                right= right.next;
            } 
            
            tail = tail.next;
        }
        
        if(left !=null){
            tail.next = left;
        }
        
        if(right !=null){
            tail.next = right;
        }
		
        return dummyHead.next;
    }
    public ListNode getMidPrev(ListNode head){
        ListNode prev = head;
        ListNode slow = head;
        ListNode fast = head;
        while(fast != null && fast.next != null){
            prev = slow;
            slow = slow.next;
            fast = fast.next.next;
        }
        return prev;
    }

}
